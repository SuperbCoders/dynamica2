// Generated by CoffeeScript 1.9.3
(function() {
  var args, chart_types, charts, check_options, donut_charts, host, imagePath, options, page, pages, parse_args, url, wp,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  wp = require('webpage');

  args = require('system').args;

  pages = {};

  chart_types = ['donut', 'block', 'big'];

  donut_charts = ['new_and_repeat_customers_number', 'order_statuses'];

  charts = ['total_gross_revenues', 'total_gross_delivery', 'shipping_cost_as_a_percentage_of_total_revenue', 'average_order_value', 'average_order_size', 'order_statuses', 'orders_number', 'customers_number', 'new_customers_number', 'repeat_customers_number', 'average_revenue_per_customer', 'sales_per_visitor', 'average_customer_lifetime_value', 'unique_users_number', 'visits', 'new_and_repeat_customers_number', 'products_in_stock_number', 'items_in_stock_number', 'percentage_of_inventory_sold', 'percentage_of_stock_sold', 'products_number'];

  options = {
    prefix: '',
    url: '',
    project_id: 0,
    from: 0,
    to: 0
  };

  check_options = function() {
    if (!options.folder) {
      throw new Error('please pass images folder path at --folder');
    } else {
      console.log('Image folder path : ' + options.folder);
    }
    if (!options.chart_type) {
      throw new Error('please pass --chart_type');
    } else {
      console.log('ChartType : ' + options.chart_type);
    }
    if (!options.chart) {
      throw new Error('please pass --chart');
    } else {
      console.log('Chart : ' + options.chart);
    }
    if (!options.project_id) {
      throw new Error('please pass --project_id');
    } else {
      console.log('ProjectID : ' + options.project_id);
    }
    if (!options.from) {
      throw new Error('please pass --from in 13.08.1900 format');
    } else {
      console.log('Date from : ' + options.from);
    }
    if (!options.to) {
      throw new Error('please pass --to in 13.08.1900 format');
    } else {
      console.log('Date to : ' + options.to);
    }
    if (!options.prefix) {
      throw new Error('please pass --prefix');
    } else {
      return console.log('Prefix : ' + options.prefix);
    }
  };

  parse_args = function() {
    return args.forEach(function(arg, i) {
      var arg_name, arg_value;
      arg_name = arg.split('=')[0];
      arg_value = arg.split('=')[1];
      switch (arg_name) {
        case '--folder':
          options.folder = arg_value;
          break;
        case '--chart_type':
          if (indexOf.call(chart_types, arg_value) >= 0) {
            options.chart_type = arg_value;
          }
          break;
        case '--chart':
          if (indexOf.call(charts, arg_value) >= 0) {
            options.chart = arg_value;
          }
          break;
        case '--prefix':
          options.prefix = arg_value;
          break;
        case '--project_id':
          options.project_id = arg_value;
          break;
        case '--from':
          options.from = arg_value;
          break;
        case '--to':
          options.to = arg_value;
          break;
        case '--env':
          options.env = arg_value;
      }
    });
  };

  imagePath = function() {
    return options.folder + '/' + options.prefix + '_' + options.chart_type + '_' + options.chart + '.png';
  };

  parse_args();

  check_options();

  if (options.env === 'staging') {
    host = 'http://dev-dyn2.onomnenado.ru/';
  } else if (options.env === 'development') {
    host = 'http://localhost:3000/';
  }

  end;

  url = (host + "/draw/" + options.chart_type + "?project_id=" + options.project_id + "&from=" + options.from + "&to=" + options.to + "&chart=") + options.chart;

  page = wp.create({
    url: url
  });

  page.viewportSize = {
    width: 1280,
    height: 1024
  };

  page.onResourceRequested = function(request) {
    console.log('= onResourceRequested()');
    console.log('  request: ' + JSON.stringify(request, void 0, 4));
  };

  page.onResourceReceived = function(response) {
    console.log('= onResourceReceived()');
    console.log('  id: ' + response.id + ', stage: "' + response.stage + '", response: ' + JSON.stringify(response));
  };

  page.onLoadStarted = function() {
    var currentUrl;
    console.log('= onLoadStarted()');
    currentUrl = page.evaluate(function() {
      return window.location.href;
    });
    console.log('  leaving url: ' + currentUrl);
  };

  page.onLoadFinished = function(status) {
    console.log('= onLoadFinished()');
    console.log('  status: ' + status);
  };

  page.onNavigationRequested = function(url, type, willNavigate, main) {
    console.log('= onNavigationRequested');
    console.log('  destination_url: ' + url);
    console.log('  type (cause): ' + type);
    console.log('  will navigate: ' + willNavigate);
    console.log('  from page\'s main frame: ' + main);
  };

  page.onResourceError = function(resourceError) {
    console.log('= onResourceError()');
    console.log('  - unable to load url: "' + resourceError.url + '"');
    console.log('  - error code: ' + resourceError.errorCode + ', description: ' + resourceError.errorString);
  };

  page.onError = function(msg, trace) {
    var msgStack;
    console.log('= onError()');
    msgStack = ['  ERROR: ' + msg];
    if (trace) {
      msgStack.push('  TRACE:');
      trace.forEach(function(t) {
        msgStack.push('    -> ' + t.file + ': ' + t.line + (t["function"] ? ' (in function "' + t["function"] + '")' : ''));
      });
    }
    console.log(msgStack.join('\n'));
  };

  switch (options.chart_type) {
    case 'big':
      page.clipRect = {
        top: 0,
        left: 0,
        width: 628,
        height: 520
      };
      break;
    default:
      page.clipRect = {
        top: 0,
        left: 0,
        width: 320,
        height: 290
      };
  }

  page.open(url, function(status) {
    if (status === 'success') {
      console.log('Image for ' + options.chart + ' saved to ' + imagePath());
      page.render(imagePath(), {
        format: 'png',
        quality: '100'
      });
    } else {
      console.log('Page status : ' + status);
    }
    phantom.exit();
  });

}).call(this);
